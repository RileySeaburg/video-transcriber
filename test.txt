All right. So with that said like one do a little bit of a wrap up because now you've gotten this huge tool right? If you look at all the topics we went over in discrete math, right? You got computability. You got sets you got relations. You got functions. You got trees. You got graphs you got this whole, you know list of stuff and we don't just kind of force this all down your throat because we're like, oh, you know, you should worry about Theory and Cooter science is because the theory really makes a difference remember that very first day. It's the theory that least the revolutions. It's all this kind of stuff about thinking about more efficient algorithms or what's actually computable or what we can actually do with a graph in terms of modeling the web or networks or database and relational Theory the cause whole new fields to be generated, right? So don't think about the stuff as the oh I got through want the 103 is I'm done now, like that's the last thing I need to worry about this stuff think about this stuff when you're doing computer science because if you want to start the next revolution in computer science, I guarantee you it's not going to be based on having written another 10,000 lines of code. It's going to be based on some insight you get from some mathematical theory that allows you to say this whole problem should be
This different way because we can really model it as this tree where information is just passing through a tree and that's what it really is. So the whole point of having one of the threes and I'll give you a little side historical note when I was an undergrad in the we days of you are Y3 is one my favorite classes like and at the time they were knocking numbered 103 that we're number one of nine just for historical reasons, but now they're one of the threes and there were just the coolest thing and so when I found out like I got to teach the one two threes, I was just like oh life is so good and part of it is because it's not just like, you know sitting up playing with math. Although my wife thinks that's kind of weird and itself but is the fact that think about the time that you're living in right like Don knuth he's considered the father of computer science is still alive and he's in this department, right? It's sort of like your geometers and you're living in the time of Euclid right think about all the things that are going to happen in computer science in terms of the future of computer science and all these problems which now we come up to the board were like, oh, yeah. This is an open problem. And that's an open problem 30 years from now 20 years from now 10 years from now, maybe five. These are going to be open problems, right? Someone's going to get up here and say oh, yeah. I remember when you know, if
Donald theorem came out and actually prove that he was not equal to NP and they'll go over that in the class right or they'll come up with a particular conjecture that someone came up with. Oh, here's the Wayne conjecture for why we actually think that you know, non determinism is non determinism in this case doesn't give you any more power than this other case, right? It's all happening. Now. It don't think of this stuff is like, you know dead people who did this stuff and it's just happening. Now you're forced to do it you're living in it. You'll be the one to actually be creating the next generation of the stuff which is why it's important for you to understand it now and that's why I guess sort of excited in the veins throb in my head because that's just to an instructor is no cooler thing that if like ten years from now, I can be like, yeah, you know that dude who proved that P was not equal to NP. Yeah. He learned about NP in my class and then they're like, yeah. Well, why don't you prove it? I'm like that's not important right now. So the important thing is that they learned about it here. All right. So with that said good luck on the final exam. Thanks for a nice quarter, and I wish you guys all well after this class.
